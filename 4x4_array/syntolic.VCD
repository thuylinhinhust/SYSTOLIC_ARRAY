$date
	Tue Feb 11 15:46:10 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 1 ! read_data $end
$var wire 1 " done $end
$var wire 8 # data_in_B [7:0] $end
$var wire 8 $ data_in_A [7:0] $end
$var parameter 32 % K_SIZE $end
$var parameter 32 & M_SIZE $end
$var parameter 32 ' N_SIZE $end
$var reg 5 ( add_A_cnt [4:0] $end
$var reg 1 ) clk $end
$var reg 1 * data_valid $end
$var reg 1 + read_reg $end
$var reg 1 , rst_n $end
$var reg 1 - start_compute $end
$var integer 32 . file [31:0] $end
$var integer 32 / i [31:0] $end
$var integer 32 0 j [31:0] $end
$scope module top $end
$var wire 1 ) clk $end
$var wire 8 1 data_in_A [7:0] $end
$var wire 8 2 data_in_B [7:0] $end
$var wire 1 * data_valid $end
$var wire 1 , rst_n $end
$var wire 1 - start_compute $end
$var wire 1 3 set_reg_path_7 $end
$var wire 1 4 set_reg_path_6 $end
$var wire 1 5 set_reg_path_5 $end
$var wire 1 6 set_reg_path_4 $end
$var wire 1 7 set_reg_path_3 $end
$var wire 1 8 set_reg_path_2 $end
$var wire 1 9 set_reg_path_1 $end
$var wire 1 ! read_data $end
$var wire 4 : in_valid_B [3:0] $end
$var wire 4 ; in_valid_A [3:0] $end
$var wire 1 < in_valid_8 $end
$var wire 1 = in_valid_7 $end
$var wire 1 > in_valid_6 $end
$var wire 1 ? in_valid_5 $end
$var wire 1 @ in_valid_4 $end
$var wire 1 A in_valid_3 $end
$var wire 1 B in_valid_2 $end
$var wire 1 C in_valid_1 $end
$var wire 1 " done $end
$var wire 8 D bf_to_pe_8 [7:0] $end
$var wire 8 E bf_to_pe_7 [7:0] $end
$var wire 8 F bf_to_pe_6 [7:0] $end
$var wire 8 G bf_to_pe_5 [7:0] $end
$var wire 8 H bf_to_pe_4 [7:0] $end
$var wire 8 I bf_to_pe_3 [7:0] $end
$var wire 8 J bf_to_pe_2 [7:0] $end
$var wire 8 K bf_to_pe_1 [7:0] $end
$var wire 8 L R_pe32 [7:0] $end
$var wire 8 M R_pe31 [7:0] $end
$var wire 8 N R_pe30 [7:0] $end
$var wire 8 O R_pe22 [7:0] $end
$var wire 8 P R_pe21 [7:0] $end
$var wire 8 Q R_pe20 [7:0] $end
$var wire 8 R R_pe12 [7:0] $end
$var wire 8 S R_pe11 [7:0] $end
$var wire 8 T R_pe10 [7:0] $end
$var wire 8 U R_pe02 [7:0] $end
$var wire 8 V R_pe01 [7:0] $end
$var wire 8 W R_pe00 [7:0] $end
$var wire 8 X B_pe23 [7:0] $end
$var wire 8 Y B_pe22 [7:0] $end
$var wire 8 Z B_pe21 [7:0] $end
$var wire 8 [ B_pe20 [7:0] $end
$var wire 8 \ B_pe13 [7:0] $end
$var wire 8 ] B_pe12 [7:0] $end
$var wire 8 ^ B_pe11 [7:0] $end
$var wire 8 _ B_pe10 [7:0] $end
$var wire 8 ` B_pe03 [7:0] $end
$var wire 8 a B_pe02 [7:0] $end
$var wire 8 b B_pe01 [7:0] $end
$var wire 8 c B_pe00 [7:0] $end
$var parameter 32 d BUFFER_SIZE $end
$var parameter 32 e DATA_WIDTH $end
$var parameter 32 f HEIGHT $end
$var parameter 32 g WIDTH $end
$scope module buffer_row_A1 $end
$var wire 1 ) clk $end
$var wire 8 h data_in [7:0] $end
$var wire 1 C in_valid $end
$var wire 1 , rst_n $end
$var parameter 32 i BUFFER_SIZE $end
$var parameter 32 j DATA_WIDTH $end
$var reg 8 k data_out [7:0] $end
$var integer 32 l i [31:0] $end
$upscope $end
$scope module buffer_row_A2 $end
$var wire 1 ) clk $end
$var wire 8 m data_in [7:0] $end
$var wire 1 B in_valid $end
$var wire 1 , rst_n $end
$var parameter 32 n BUFFER_SIZE $end
$var parameter 32 o DATA_WIDTH $end
$var reg 8 p data_out [7:0] $end
$var integer 32 q i [31:0] $end
$upscope $end
$scope module buffer_row_A3 $end
$var wire 1 ) clk $end
$var wire 8 r data_in [7:0] $end
$var wire 1 A in_valid $end
$var wire 1 , rst_n $end
$var parameter 32 s BUFFER_SIZE $end
$var parameter 32 t DATA_WIDTH $end
$var reg 8 u data_out [7:0] $end
$var integer 32 v i [31:0] $end
$upscope $end
$scope module buffer_row_A4 $end
$var wire 1 ) clk $end
$var wire 8 w data_in [7:0] $end
$var wire 1 @ in_valid $end
$var wire 1 , rst_n $end
$var parameter 32 x BUFFER_SIZE $end
$var parameter 32 y DATA_WIDTH $end
$var reg 8 z data_out [7:0] $end
$var integer 32 { i [31:0] $end
$upscope $end
$scope module buffer_row_B1 $end
$var wire 1 ) clk $end
$var wire 8 | data_in [7:0] $end
$var wire 1 ? in_valid $end
$var wire 1 , rst_n $end
$var parameter 32 } BUFFER_SIZE $end
$var parameter 32 ~ DATA_WIDTH $end
$var reg 8 !" data_out [7:0] $end
$var integer 32 "" i [31:0] $end
$upscope $end
$scope module buffer_row_B2 $end
$var wire 1 ) clk $end
$var wire 8 #" data_in [7:0] $end
$var wire 1 > in_valid $end
$var wire 1 , rst_n $end
$var parameter 32 $" BUFFER_SIZE $end
$var parameter 32 %" DATA_WIDTH $end
$var reg 8 &" data_out [7:0] $end
$var integer 32 '" i [31:0] $end
$upscope $end
$scope module buffer_row_B3 $end
$var wire 1 ) clk $end
$var wire 8 (" data_in [7:0] $end
$var wire 1 = in_valid $end
$var wire 1 , rst_n $end
$var parameter 32 )" BUFFER_SIZE $end
$var parameter 32 *" DATA_WIDTH $end
$var reg 8 +" data_out [7:0] $end
$var integer 32 ," i [31:0] $end
$upscope $end
$scope module buffer_row_B4 $end
$var wire 1 ) clk $end
$var wire 8 -" data_in [7:0] $end
$var wire 1 < in_valid $end
$var wire 1 , rst_n $end
$var parameter 32 ." BUFFER_SIZE $end
$var parameter 32 /" DATA_WIDTH $end
$var reg 8 0" data_out [7:0] $end
$var integer 32 1" i [31:0] $end
$upscope $end
$scope module control $end
$var wire 1 ) clk $end
$var wire 1 * data_valid $end
$var wire 1 , rst_n $end
$var parameter 3 2" COMPUTE $end
$var parameter 3 3" DONE $end
$var parameter 32 4" HEIGHT $end
$var parameter 3 5" IDLE $end
$var parameter 3 6" LOAD_DATA $end
$var parameter 32 7" ROW_NUM $end
$var parameter 32 8" WIDTH $end
$var reg 5 9" counter [4:0] $end
$var reg 5 :" counter_buffer [4:0] $end
$var reg 5 ;" counter_input [4:0] $end
$var reg 5 <" counter_pixel [4:0] $end
$var reg 2 =" current_state [1:0] $end
$var reg 1 " done $end
$var reg 4 >" in_valid_A [3:0] $end
$var reg 4 ?" in_valid_B [3:0] $end
$var reg 4 @" mux_select [3:0] $end
$var reg 2 A" next_state [1:0] $end
$var reg 1 ! read_data $end
$var reg 1 9 set_reg_path_1 $end
$var reg 1 8 set_reg_path_2 $end
$var reg 1 7 set_reg_path_3 $end
$var reg 1 6 set_reg_path_4 $end
$var reg 1 5 set_reg_path_5 $end
$var reg 1 4 set_reg_path_6 $end
$var reg 1 3 set_reg_path_7 $end
$var reg 1 B" start_compute $end
$upscope $end
$scope module pe00 $end
$var wire 1 ) clk $end
$var wire 8 C" left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 9 set_reg $end
$var wire 8 D" top_in [7:0] $end
$var wire 16 E" sum [15:0] $end
$var parameter 32 F" DATA_WIDTH $end
$var reg 8 G" bottom_out [7:0] $end
$var reg 16 H" result [15:0] $end
$var reg 8 I" right_out [7:0] $end
$upscope $end
$scope module pe01 $end
$var wire 1 ) clk $end
$var wire 8 J" left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 8 set_reg $end
$var wire 8 K" top_in [7:0] $end
$var wire 16 L" sum [15:0] $end
$var parameter 32 M" DATA_WIDTH $end
$var reg 8 N" bottom_out [7:0] $end
$var reg 16 O" result [15:0] $end
$var reg 8 P" right_out [7:0] $end
$upscope $end
$scope module pe02 $end
$var wire 1 ) clk $end
$var wire 8 Q" left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 7 set_reg $end
$var wire 8 R" top_in [7:0] $end
$var wire 16 S" sum [15:0] $end
$var parameter 32 T" DATA_WIDTH $end
$var reg 8 U" bottom_out [7:0] $end
$var reg 16 V" result [15:0] $end
$var reg 8 W" right_out [7:0] $end
$upscope $end
$scope module pe03 $end
$var wire 1 ) clk $end
$var wire 8 X" left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 6 set_reg $end
$var wire 8 Y" top_in [7:0] $end
$var wire 16 Z" sum [15:0] $end
$var parameter 32 [" DATA_WIDTH $end
$var reg 8 \" bottom_out [7:0] $end
$var reg 16 ]" result [15:0] $end
$var reg 8 ^" right_out [7:0] $end
$upscope $end
$scope module pe10 $end
$var wire 1 ) clk $end
$var wire 8 _" left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 8 set_reg $end
$var wire 8 `" top_in [7:0] $end
$var wire 16 a" sum [15:0] $end
$var parameter 32 b" DATA_WIDTH $end
$var reg 8 c" bottom_out [7:0] $end
$var reg 16 d" result [15:0] $end
$var reg 8 e" right_out [7:0] $end
$upscope $end
$scope module pe11 $end
$var wire 1 ) clk $end
$var wire 8 f" left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 7 set_reg $end
$var wire 8 g" top_in [7:0] $end
$var wire 16 h" sum [15:0] $end
$var parameter 32 i" DATA_WIDTH $end
$var reg 8 j" bottom_out [7:0] $end
$var reg 16 k" result [15:0] $end
$var reg 8 l" right_out [7:0] $end
$upscope $end
$scope module pe12 $end
$var wire 1 ) clk $end
$var wire 8 m" left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 6 set_reg $end
$var wire 8 n" top_in [7:0] $end
$var wire 16 o" sum [15:0] $end
$var parameter 32 p" DATA_WIDTH $end
$var reg 8 q" bottom_out [7:0] $end
$var reg 16 r" result [15:0] $end
$var reg 8 s" right_out [7:0] $end
$upscope $end
$scope module pe13 $end
$var wire 1 ) clk $end
$var wire 8 t" left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 5 set_reg $end
$var wire 8 u" top_in [7:0] $end
$var wire 16 v" sum [15:0] $end
$var parameter 32 w" DATA_WIDTH $end
$var reg 8 x" bottom_out [7:0] $end
$var reg 16 y" result [15:0] $end
$var reg 8 z" right_out [7:0] $end
$upscope $end
$scope module pe20 $end
$var wire 1 ) clk $end
$var wire 8 {" left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 7 set_reg $end
$var wire 8 |" top_in [7:0] $end
$var wire 16 }" sum [15:0] $end
$var parameter 32 ~" DATA_WIDTH $end
$var reg 8 !# bottom_out [7:0] $end
$var reg 16 "# result [15:0] $end
$var reg 8 ## right_out [7:0] $end
$upscope $end
$scope module pe21 $end
$var wire 1 ) clk $end
$var wire 8 $# left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 6 set_reg $end
$var wire 8 %# top_in [7:0] $end
$var wire 16 &# sum [15:0] $end
$var parameter 32 '# DATA_WIDTH $end
$var reg 8 (# bottom_out [7:0] $end
$var reg 16 )# result [15:0] $end
$var reg 8 *# right_out [7:0] $end
$upscope $end
$scope module pe22 $end
$var wire 1 ) clk $end
$var wire 8 +# left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 5 set_reg $end
$var wire 8 ,# top_in [7:0] $end
$var wire 16 -# sum [15:0] $end
$var parameter 32 .# DATA_WIDTH $end
$var reg 8 /# bottom_out [7:0] $end
$var reg 16 0# result [15:0] $end
$var reg 8 1# right_out [7:0] $end
$upscope $end
$scope module pe23 $end
$var wire 1 ) clk $end
$var wire 8 2# left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 4 set_reg $end
$var wire 8 3# top_in [7:0] $end
$var wire 16 4# sum [15:0] $end
$var parameter 32 5# DATA_WIDTH $end
$var reg 8 6# bottom_out [7:0] $end
$var reg 16 7# result [15:0] $end
$var reg 8 8# right_out [7:0] $end
$upscope $end
$scope module pe30 $end
$var wire 1 ) clk $end
$var wire 8 9# left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 6 set_reg $end
$var wire 8 :# top_in [7:0] $end
$var wire 16 ;# sum [15:0] $end
$var parameter 32 <# DATA_WIDTH $end
$var reg 8 =# bottom_out [7:0] $end
$var reg 16 ># result [15:0] $end
$var reg 8 ?# right_out [7:0] $end
$upscope $end
$scope module pe31 $end
$var wire 1 ) clk $end
$var wire 8 @# left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 5 set_reg $end
$var wire 8 A# top_in [7:0] $end
$var wire 16 B# sum [15:0] $end
$var parameter 32 C# DATA_WIDTH $end
$var reg 8 D# bottom_out [7:0] $end
$var reg 16 E# result [15:0] $end
$var reg 8 F# right_out [7:0] $end
$upscope $end
$scope module pe32 $end
$var wire 1 ) clk $end
$var wire 8 G# left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 4 set_reg $end
$var wire 8 H# top_in [7:0] $end
$var wire 16 I# sum [15:0] $end
$var parameter 32 J# DATA_WIDTH $end
$var reg 8 K# bottom_out [7:0] $end
$var reg 16 L# result [15:0] $end
$var reg 8 M# right_out [7:0] $end
$upscope $end
$scope module pe33 $end
$var wire 1 ) clk $end
$var wire 8 N# left_in [7:0] $end
$var wire 1 , rst_n $end
$var wire 1 3 set_reg $end
$var wire 8 O# top_in [7:0] $end
$var wire 16 P# sum [15:0] $end
$var parameter 32 Q# DATA_WIDTH $end
$var reg 8 R# bottom_out [7:0] $end
$var reg 16 S# result [15:0] $end
$var reg 8 T# right_out [7:0] $end
$upscope $end
$upscope $end
$scope task compare $end
$var integer 32 U# i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 Q#
b1000 J#
b1000 C#
b1000 <#
b1000 5#
b1000 .#
b1000 '#
b1000 ~"
b1000 w"
b1000 p"
b1000 i"
b1000 b"
b1000 ["
b1000 T"
b1000 M"
b1000 F"
b100 8"
b100 7"
b1 6"
b0 5"
b100 4"
b11 3"
b10 2"
b1000 /"
b100 ."
b1000 *"
b100 )"
b1000 %"
b100 $"
b1000 ~
b100 }
b1000 y
b100 x
b1000 t
b100 s
b1000 o
b100 n
b1000 j
b100 i
b100 g
b100 f
b1000 e
b100 d
b100 '
b100 &
b100 %
$end
#0
$dumpvars
bx U#
b0 T#
b0 S#
b0 R#
b0 P#
b0 O#
b0 N#
b0 M#
b0 L#
b0 K#
b0 I#
b0 H#
b0 G#
b0 F#
b0 E#
b0 D#
b0 B#
b0 A#
b0 @#
b0 ?#
b0 >#
b0 =#
b0 ;#
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
b0 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 E"
b0 D"
b0 C"
xB"
bx A"
bx @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
bx 1"
b0 0"
bx -"
bx ,"
b0 +"
bx ("
bx '"
b0 &"
bx #"
bx ""
b0 !"
bx |
bx {
b0 z
bx w
bx v
b0 u
bx r
bx q
b0 p
bx m
bx l
b0 k
bx h
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
0C
0B
0A
0@
0?
0>
0=
0<
b0 ;
b0 :
x9
x8
x7
x6
x5
x4
x3
bx 2
bx 1
bx 0
bx /
bx .
x-
0,
x+
x*
0)
bx (
bx $
bx #
0"
x!
$end
#5
b0 $
b0 1
b0 h
b0 m
b0 r
b0 w
b0 #
b0 2
b0 |
b0 #"
b0 ("
b0 -"
0+
b0 (
1)
#10
0)
1,
#15
bx $
bx 1
bx h
bx m
bx r
bx w
bx #
bx 2
bx |
bx #"
bx ("
bx -"
b0 A"
bx ="
x+
b100 l
b100 q
b100 v
b100 {
b100 ""
b100 '"
b100 ,"
b100 1"
1)
#20
0)
#25
0B"
b0 ="
b100 1"
b100 ,"
b100 '"
b100 ""
b100 {
b100 v
b100 q
b100 l
1)
#30
0)
#35
b100 l
b100 q
b100 v
b100 {
b100 ""
b100 '"
b100 ,"
b100 1"
1)
#40
0)
#45
b100 1"
b100 ,"
b100 '"
b100 ""
b100 {
b100 v
b100 q
b100 l
1)
#50
b1 A"
0)
1*
#55
b1 ="
b1 :"
b1 ;"
1!
b100 l
b100 q
b100 v
b100 {
b100 ""
b100 '"
b100 ,"
b100 1"
1)
#60
0)
0*
#65
b10 $
b10 1
b10 h
b10 m
b10 r
b10 w
b100 #
b100 2
b100 |
b100 #"
b100 ("
b100 -"
1?
1C
b1 (
1+
b1000 :
b1000 ?"
b1000 ;
b1000 >"
b10 :"
b10 ;"
b100 1"
b100 ,"
b100 '"
b100 ""
b100 {
b100 v
b100 q
b100 l
1)
#70
0)
#75
b101 $
b101 1
b101 h
b101 m
b101 r
b101 w
b11 #
b11 2
b11 |
b11 #"
b11 ("
b11 -"
b11 :"
b11 ;"
b10 (
b100 q
b100 v
b100 {
b100 '"
b100 ,"
b100 1"
1)
#80
0)
#85
b10 $
b10 1
b10 h
b10 m
b10 r
b10 w
b11 (
b100 :"
b100 ;"
b100 1"
b100 ,"
b100 '"
b100 {
b100 v
b100 q
1)
#90
0)
#95
b101 $
b101 1
b101 h
b101 m
b101 r
b101 w
b100 #
b100 2
b100 |
b100 #"
b100 ("
b100 -"
b101 :"
b101 ;"
b100 (
b100 q
b100 v
b100 {
b100 '"
b100 ,"
b100 1"
1)
#100
0)
#105
b100 $
b100 1
b100 h
b100 m
b100 r
b100 w
b10 #
b10 2
b10 |
b10 #"
b10 ("
b10 -"
1>
0?
1B
0C
b101 (
b100 :
b100 ?"
b100 ;
b100 >"
b110 :"
b110 ;"
b100 1"
b100 ,"
b100 '"
b100 {
b100 v
b100 q
1)
#110
0)
#115
b1 #
b1 2
b1 |
b1 #"
b1 ("
b1 -"
b111 :"
b111 ;"
b110 (
b100 l
b100 v
b100 {
b100 ""
b100 ,"
b100 1"
1)
#120
0)
#125
b11 $
b11 1
b11 h
b11 m
b11 r
b11 w
b100 #
b100 2
b100 |
b100 #"
b100 ("
b100 -"
b111 (
b1000 :"
b1000 ;"
b100 1"
b100 ,"
b100 ""
b100 {
b100 v
b100 l
1)
#130
0)
#135
b101 #
b101 2
b101 |
b101 #"
b101 ("
b101 -"
b1001 :"
b1001 ;"
b1000 (
b100 l
b100 v
b100 {
b100 ""
b100 ,"
b100 1"
1)
#140
0)
#145
b101 $
b101 1
b101 h
b101 m
b101 r
b101 w
b11 #
b11 2
b11 |
b11 #"
b11 ("
b11 -"
1=
0>
1A
0B
b1001 (
b10 :
b10 ?"
b10 ;
b10 >"
b1010 :"
b1010 ;"
b100 1"
b100 ,"
b100 ""
b100 {
b100 v
b100 l
1)
#150
0)
#155
b11 $
b11 1
b11 h
b11 m
b11 r
b11 w
b101 #
b101 2
b101 |
b101 #"
b101 ("
b101 -"
b1011 :"
b1011 ;"
b1010 (
b100 l
b100 q
b100 {
b100 ""
b100 '"
b100 1"
1)
#160
0)
#165
b11 #
b11 2
b11 |
b11 #"
b11 ("
b11 -"
b1011 (
b1100 :"
b1100 ;"
b100 1"
b100 '"
b100 ""
b100 {
b100 q
b100 l
1)
#170
0)
#175
b10 $
b10 1
b10 h
b10 m
b10 r
b10 w
b100 #
b100 2
b100 |
b100 #"
b100 ("
b100 -"
b1101 :"
b1101 ;"
b1100 (
b100 l
b100 q
b100 {
b100 ""
b100 '"
b100 1"
1)
#180
0)
#185
b101 $
b101 1
b101 h
b101 m
b101 r
b101 w
b101 #
b101 2
b101 |
b101 #"
b101 ("
b101 -"
1<
0=
1@
0A
b1101 (
b1 :
b1 ?"
b1 ;
b1 >"
b1110 :"
b1110 ;"
b100 1"
b100 '"
b100 ""
b100 {
b100 q
b100 l
1)
#190
0)
#195
b10 #
b10 2
b10 |
b10 #"
b10 ("
b10 -"
b1111 :"
b1111 ;"
b1110 (
b100 l
b100 q
b100 v
b100 ""
b100 '"
b100 ,"
1)
#200
0)
#205
b100 $
b100 1
b100 h
b100 m
b100 r
b100 w
b101 #
b101 2
b101 |
b101 #"
b101 ("
b101 -"
b1111 (
b10000 :"
b10000 ;"
b100 ,"
b100 '"
b100 ""
b100 v
b100 q
b100 l
1)
#210
0)
#215
b11 $
b11 1
b11 h
b11 m
b11 r
b11 w
b10001 :"
b10001 ;"
b10000 (
b100 l
b100 q
b100 v
b100 ""
b100 '"
b100 ,"
1)
#220
0)
#225
bx $
bx 1
bx h
bx m
bx r
bx w
bx #
bx 2
bx |
bx #"
bx ("
bx -"
0<
0@
b0 (
b0 :
b0 ?"
b0 ;
b0 >"
b10010 :"
b10010 ;"
b100 ,"
b100 '"
b100 ""
b100 v
b100 q
b100 l
1)
#230
0)
#235
b10 $
b10 1
b10 h
b10 m
b10 r
b10 w
b100 #
b100 2
b100 |
b100 #"
b100 ("
b100 -"
b10 A"
1B"
b10011 :"
b10011 ;"
b1 (
b100 l
b100 q
b100 v
b100 {
b100 ""
b100 '"
b100 ,"
b100 1"
1)
#240
0)
#245
b101 $
b101 1
b101 h
b101 m
b101 r
b101 w
b11 #
b11 2
b11 |
b11 #"
b11 ("
b11 -"
1?
1C
b10 (
03
04
05
06
07
08
09
0!
b1000 :
b1000 ?"
b1000 ;
b1000 >"
b1 <"
b1 9"
b10 ="
b100 1"
b100 ,"
b100 '"
b100 ""
b100 {
b100 v
b100 q
b100 l
1)
#250
0)
#255
b0 $
b0 1
b0 h
b0 m
b0 r
b0 w
b0 #
b0 2
b0 |
b0 #"
b0 ("
b0 -"
b1000 E"
1>
1B
b10 K
b10 k
b10 C"
b100 G
b100 !"
b100 D"
19
b1100 :
b1100 ?"
b1100 ;
b1100 >"
b10 <"
b10 9"
0+
b100 q
b100 v
b100 {
b100 '"
b100 ,"
b100 1"
1)
#260
0)
#265
1=
1A
b10000 a"
b100 L"
b1111 E"
18
b1110 :
b1110 ?"
b1110 ;
b1110 >"
b11 <"
b11 9"
b100 c
b100 G"
b100 `"
b10 W
b10 I"
b10 J"
b1000 H"
b10 F
b10 &"
b10 K"
b11 G
b11 !"
b11 D"
b100 J
b100 p
b100 _"
b101 K
b101 k
b101 C"
b100 1"
b100 ,"
b100 {
b100 v
1)
#270
0)
#275
b110 E"
b10100 }"
b110 S"
b1100 a"
b101 L"
b1000 h"
1<
1@
b10 K
b10 k
b10 C"
b101 I
b101 u
b101 {"
b1 F
b1 &"
b1 K"
b11 E
b11 +"
b11 R"
b11 c
b11 G"
b11 `"
b101 W
b101 I"
b101 J"
b10111 H"
b10 b
b10 N"
b10 g"
b10 V
b10 P"
b10 Q"
b100 O"
b100 _
b100 c"
b100 |"
b100 T
b100 e"
b100 f"
b10000 d"
17
b1111 :
b1111 ?"
b1111 ;
b1111 >"
b100 <"
b100 9"
b100 {
b100 1"
1)
#280
0)
#285
b10100 ;#
b1010 &#
b1100 o"
b1010 Z"
b100 h"
b11001 S"
b1000 L"
b1001 }"
b1001 a"
b10100 E"
16
b101 <"
b101 9"
b100 [
b100 !#
b100 :#
b101 Q
b101 ##
b101 $#
b10100 "#
b10 ^
b10 j"
b10 %#
b100 S
b100 l"
b100 m"
b1000 k"
b11 _
b11 c"
b11 |"
b11100 d"
b11 a
b11 U"
b11 n"
b10 U
b10 W"
b10 X"
b110 V"
b1 b
b1 N"
b1 g"
b101 V
b101 P"
b101 Q"
b1001 O"
b10 W
b10 I"
b10 J"
b11101 H"
b101 D
b101 0"
b101 Y"
b101 E
b101 +"
b101 R"
b100 F
b100 &"
b100 K"
b100 G
b100 !"
b100 D"
b101 H
b101 z
b101 9#
b11 I
b11 u
b11 {"
b11 J
b11 p
b11 _"
b101 K
b101 k
b101 C"
1)
#290
0)
#295
b1111 E"
b1100 a"
b11001 L"
b110 S"
b10100 o"
b1010 Z"
b10100 v"
b1100 h"
b1111 -#
b1111 ;#
b11 &#
b1010 B#
b11 G
b11 !"
b11 D"
b101 F
b101 &"
b101 K"
b11 E
b11 +"
b11 R"
b10 D
b10 0"
b10 Y"
b100 c
b100 G"
b100 `"
b101 W
b101 I"
b101 J"
b110001 H"
b100 b
b100 N"
b100 g"
b10 V
b10 P"
b10 Q"
b10001 O"
b101 a
b101 U"
b101 n"
b101 U
b101 W"
b101 X"
b11111 V"
b101 `
b101 \"
b101 u"
b10 ^"
b1010 ]"
b11 T
b11 e"
b11 f"
b100101 d"
b1 ^
b1 j"
b1 %#
b1100 k"
b11 ]
b11 q"
b11 ,#
b100 R
b100 s"
b100 t"
b1100 r"
b11 [
b11 !#
b11 :#
b11 Q
b11 ##
b11 $#
b11101 "#
b10 Z
b10 (#
b10 A#
b101 P
b101 *#
b101 +#
b1010 )#
b100 =#
b101 N
b101 ?#
b101 @#
b10100 >#
15
09
b110 <"
b110 9"
1)
#300
0)
#305
b1111 I#
b11001 4#
b101 B#
b1111 -#
b1100 &#
b1000 v"
b1001 o"
b1111 h"
b1010 Z"
b10100 S"
b0 L"
b1100 ;#
b1000 }"
b0 a"
b0 E"
14
08
b111 <"
b111 9"
b10 D#
b101 M
b101 F#
b101 G#
b1010 E#
b11 =#
b100011 >#
b11 Y
b11 /#
b11 H#
b101 O
b101 1#
b101 2#
b1111 0#
b1 Z
b1 (#
b1 A#
b11 P
b11 *#
b11 +#
b1101 )#
b100110 "#
b101 \
b101 x"
b101 3#
b100 z"
b10100 y"
b101 ]
b101 q"
b101 ,#
b100000 r"
b100 ^
b100 j"
b100 %#
b11 S
b11 l"
b11 m"
b11000 k"
b100 _
b100 c"
b100 |"
b110001 d"
b10 `
b10 \"
b10 u"
b101 ^"
b10100 ]"
b11 a
b11 U"
b11 n"
b10 U
b10 W"
b10 X"
b100101 V"
b101 b
b101 N"
b101 g"
b101 V
b101 P"
b101 Q"
b101010 O"
b11 c
b11 G"
b11 `"
b101 D
b101 0"
b101 Y"
b100 E
b100 +"
b100 R"
b0 F
b0 &"
b0 K"
b0 G
b0 !"
b0 D"
b100 H
b100 z
b100 9#
b10 I
b10 u
b10 {"
b0 J
b0 p
b0 _"
b0 K
b0 k
b0 C"
1)
#310
0)
#315
b0 S"
b1100 o"
b11001 Z"
b0 }"
b0 h"
b1001 -#
b1111 v"
b1100 ;#
b1010 &#
b11001 I#
b110 4#
b11001 P#
b10000 B#
b0 I
b0 u
b0 {"
b11 H
b11 z
b11 9#
b0 E
b0 +"
b0 R"
b0 c
b0 G"
b0 `"
b0 W
b0 I"
b0 J"
b0 b
b0 N"
b0 g"
b100 a
b100 U"
b100 n"
b101 U
b101 W"
b101 X"
b111001 V"
b101 `
b101 \"
b101 u"
b10 ^"
b11110 ]"
b11 _
b11 c"
b11 |"
b0 T
b0 e"
b0 f"
b101 ^
b101 j"
b101 %#
b100111 k"
b11 ]
b11 q"
b11 ,#
b11 R
b11 s"
b11 t"
b101001 r"
b10 \
b10 x"
b10 3#
b11100 y"
b100 [
b100 !#
b100 :#
b10 Q
b10 ##
b10 $#
b101110 "#
b100 Z
b100 (#
b100 A#
b11001 )#
b101 Y
b101 /#
b101 H#
b11 O
b11 1#
b11 2#
b11110 0#
b101 X
b101 6#
b101 O#
b101 8#
b11001 7#
b100 N
b100 ?#
b100 @#
b101111 >#
b1 D#
b1111 E#
b11 K#
b101 L
b101 M#
b101 N#
b1111 L#
13
07
b1000 <"
b1000 9"
1)
#320
0)
#325
b1010 P#
b1100 I#
b1111 B#
b1111 4#
b1000 -#
b0 &#
b0 o"
b0 Z"
b0 ;#
06
b1001 <"
b1001 9"
b101 R#
b101 T#
b11001 S#
b101 K#
b101000 L#
b100 D#
b100 M
b100 F#
b100 G#
b11111 E#
b100 =#
b11 N
b11 ?#
b11 @#
b111011 >#
b10 X
b10 6#
b10 O#
b11 8#
b11111 7#
b11 Y
b11 /#
b11 H#
b100111 0#
b101 Z
b101 (#
b101 A#
b10 P
b10 *#
b10 +#
b100011 )#
b11 [
b11 !#
b11 :#
b0 Q
b0 ##
b0 $#
b101 \
b101 x"
b101 3#
b11 z"
b101011 y"
b100 ]
b100 q"
b100 ,#
b110101 r"
b0 ^
b0 j"
b0 %#
b0 S
b0 l"
b0 m"
b0 _
b0 c"
b0 |"
b101 ^"
b110111 ]"
b0 a
b0 U"
b0 n"
b0 V
b0 P"
b0 Q"
b0 D
b0 0"
b0 Y"
b0 H
b0 z
b0 9#
1)
#330
0)
#335
b0 v"
b0 -#
b1010 4#
b0 B#
b1100 I#
b10100 P#
b0 U
b0 W"
b0 X"
b0 `
b0 \"
b0 u"
b0 ]
b0 q"
b0 ,#
b0 R
b0 s"
b0 t"
b111010 y"
b0 [
b0 !#
b0 :#
b0 Z
b0 (#
b0 A#
b0 P
b0 *#
b0 +#
b100 Y
b100 /#
b100 H#
b10 O
b10 1#
b10 2#
b101111 0#
b101 X
b101 6#
b101 O#
b101110 7#
b11 =#
b0 N
b0 ?#
b0 @#
b101 D#
b11 M
b11 F#
b11 G#
b101110 E#
b11 K#
b100 L
b100 M#
b100 N#
b110100 L#
b10 R#
b100011 S#
05
b1010 <"
b1010 9"
1)
#340
0)
#345
b1111 P#
b0 I#
b0 4#
04
b1011 <"
b1011 9"
b101 R#
b100 T#
b110111 S#
b100 K#
b11 L
b11 M#
b11 N#
b1000000 L#
b0 D#
b0 M
b0 F#
b0 G#
b0 =#
b10 8#
b111000 7#
b0 Y
b0 /#
b0 H#
b0 O
b0 1#
b0 2#
b0 \
b0 x"
b0 3#
b0 z"
b0 ^"
1)
#350
0)
#355
b0 P#
b11 A"
b0 X
b0 6#
b0 O#
b0 8#
b0 K#
b0 L
b0 M#
b0 N#
b11 T#
b1000110 S#
03
b1100 <"
b1100 9"
1)
#360
0)
#365
b10000 U#
b100 0
b100 /
b10000000000000000000000000000011 .
b0 A"
1"
b0 <"
b0 9"
b11 ="
b0 R#
b0 T#
1)
#370
0)
#375
b0 ="
0B"
b0 :"
b0 ;"
1)
#380
0)
#385
1)
#390
0)
#395
1)
#400
0)
#405
1)
#410
0)
#415
1)
#420
0)
#425
1)
#430
0)
#435
1)
#440
0)
#445
1)
#450
0)
#455
1)
#460
0)
#465
1)
#470
0)
#475
1)
#480
0)
#485
1)
#490
0)
#495
1)
#500
0)
#505
1)
#510
0)
#515
1)
#520
0)
#525
1)
#530
0)
#535
1)
#540
0)
#545
1)
#550
0)
#555
1)
#560
0)
#565
1)
#570
0)
#575
1)
#580
0)
#585
1)
#590
0)
#595
1)
#600
0)
#605
1)
#610
0)
#615
1)
#620
0)
#625
1)
#630
0)
#635
1)
#640
0)
#645
1)
#650
0)
#655
1)
#660
0)
#665
1)
#670
0)
#675
1)
#680
0)
#685
1)
#690
0)
#695
1)
#700
0)
#705
1)
#710
0)
#715
1)
#720
0)
#725
1)
#730
0)
#735
1)
#740
0)
#745
1)
#750
0)
#755
1)
#760
0)
#765
1)
#770
0)
#775
1)
#780
0)
#785
1)
#790
0)
#795
1)
#800
0)
#805
1)
#810
0)
#815
1)
#820
0)
#825
1)
#830
0)
#835
1)
#840
0)
#845
1)
#850
0)
#855
1)
#860
0)
#865
1)
#870
0)
#875
1)
#880
0)
#885
1)
#890
0)
#895
1)
#900
0)
#905
1)
#910
0)
#915
1)
#920
0)
#925
1)
#930
0)
#935
1)
#940
0)
#945
1)
#950
0)
#955
1)
#960
0)
#965
1)
#970
0)
#975
1)
#980
0)
#985
1)
#990
0)
#995
1)
#1000
0)
